---
export interface Props {
  frontmatter: {
    title: string;
    description: string;
    date: string;
    heroImage?: string;
    category: string;
  };
}

const { frontmatter } = Astro.props;
import BaseLayout from './BaseLayout.astro';
---

<BaseLayout title={frontmatter.title} description={frontmatter.description}>
  <!-- Enhanced Table of Contents Sidebar -->
  <aside class="toc-sidebar" id="toc-sidebar">
    <div class="toc-toggle" id="toc-toggle" title="Réduire/Agrandir le sommaire">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M15 18l-6-6 6-6"/>
      </svg>
    </div>
    
    <div class="toc-content">
      <div class="toc-header">
        <h3>Sommaire</h3>
        <div class="reading-progress">
          <div class="progress-bar" id="progress-bar"></div>
          <span class="progress-text" id="progress-text">0%</span>
        </div>
        <div class="reading-stats">
          <span class="reading-time" id="reading-time">~5 min</span>
          <span class="reading-position" id="reading-position">Section 1/5</span>
        </div>
      </div>
      
      <nav class="toc-nav" id="toc-nav">
        <!-- TOC will be generated by JavaScript -->
      </nav>
      
      <div class="toc-actions">
        <button class="toc-action-btn" id="scroll-to-top" title="Retour au début">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M18 15l-6-6-6 6"/>
          </svg>
          Début
        </button>
        <button class="toc-action-btn" id="scroll-to-end" title="Aller à la fin">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M6 9l6 6 6-6"/>
          </svg>
          Fin
        </button>
      </div>
    </div>
  </aside>

  <article class="blog-post">
    <div class="container">
      <!-- Article Header -->
      <header class="article-header">
        <div class="article-meta">
          <span class="category-badge">{frontmatter.category}</span>
          <time>{new Date(frontmatter.date).toLocaleDateString('fr-FR')}</time>
        </div>
        
        <h1 class="article-title">{frontmatter.title}</h1>
        <p class="article-description">{frontmatter.description}</p>
        
        {frontmatter.heroImage && (
          <div class="hero-image">
            <img src={frontmatter.heroImage} alt={frontmatter.title} />
          </div>
        )}
      </header>
      
      <!-- Article Content -->
      <div class="article-content prose" id="article-content">
        <slot />
      </div>
      
      <!-- Article Footer -->
      <footer class="article-footer">
        <div class="article-nav">
          <a href="/blog" class="btn btn-outline">← Retour aux articles</a>
          <a href="/projects" class="btn">Voir les projets →</a>
        </div>
      </footer>
    </div>
  </article>
</BaseLayout>

<script>
  // Enhanced TOC functionality with improved UX
  let tocItems = [];
  let currentActiveItem = null;
  let isAutoScrolling = false;
  let tocSidebar;
  let tocToggle;
  
  function initializeTOC() {
    tocSidebar = document.getElementById('toc-sidebar');
    tocToggle = document.getElementById('toc-toggle');
    
    if (!tocSidebar || !tocToggle) return;
    
    // Toggle functionality
    tocToggle.addEventListener('click', () => {
      tocSidebar.classList.toggle('open');
      localStorage.setItem('toc-open', tocSidebar.classList.contains('open'));
    });
    
    // Restore previous state
    const savedState = localStorage.getItem('toc-open');
    if (savedState === 'true' || window.innerWidth >= 1200) {
      tocSidebar.classList.add('open');
    }
    
    // Action buttons
    const scrollToTopBtn = document.getElementById('scroll-to-top');
    const scrollToEndBtn = document.getElementById('scroll-to-end');
    
    scrollToTopBtn?.addEventListener('click', () => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    });
    
    scrollToEndBtn?.addEventListener('click', () => {
      window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });
    });
    
    generateTOC();
    updateReadingStats();
  }
  
  function generateTOC() {
    const article = document.getElementById('article-content');
    const tocNav = document.getElementById('toc-nav');
    
    if (!article || !tocNav) return;
    
    const headings = article.querySelectorAll('h1, h2, h3, h4, h5, h6');
    tocItems = [];
    
    if (headings.length === 0) {
      tocNav.innerHTML = '<p class="no-headings">Aucun titre détecté</p>';
      return;
    }
    
    let tocHTML = '<ul class="toc-list">';
    
    headings.forEach((heading, index) => {
      if (!heading.id) {
        heading.id = `heading-${index}`;
      }
      
      const level = parseInt(heading.tagName.charAt(1));
      const text = heading.textContent.trim();
      const id = heading.id;
      
      tocItems.push({
        id,
        element: heading,
        level,
        text,
        offsetTop: heading.offsetTop
      });
      
      tocHTML += `
        <li class="toc-item toc-level-${level}">
          <a href="#${id}" class="toc-link" data-target="${id}">
            ${text}
          </a>
        </li>
      `;
    });
    
    tocHTML += '</ul>';
    tocNav.innerHTML = tocHTML;
    
    // Add smooth scroll handlers
    tocNav.querySelectorAll('.toc-link').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('data-target');
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          isAutoScrolling = true;
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
          
          // Reset auto-scroll flag after animation
          setTimeout(() => {
            isAutoScrolling = false;
          }, 1000);
        }
      });
    });
  }
  
  function updateReadingProgress() {
    const article = document.getElementById('article-content');
    const progressBar = document.getElementById('progress-bar');
    const progressText = document.getElementById('progress-text');
    
    if (!article || !progressBar || !progressText) return;
    
    const scrollTop = window.scrollY;
    const docHeight = document.documentElement.scrollHeight - window.innerHeight;
    const scrollPercent = Math.min(100, Math.max(0, (scrollTop / docHeight) * 100));
    
    progressBar.style.setProperty('--width', `${scrollPercent}%`);
    progressText.textContent = `${Math.round(scrollPercent)}%`;
    
    if (!isAutoScrolling) {
      updateActiveTOCItem();
      updateReadingPosition();
    }
  }
  
  function updateActiveTOCItem() {
    if (tocItems.length === 0) return;
    
    const scrollTop = window.scrollY + 100;
    let activeItem = null;
    
    for (let i = tocItems.length - 1; i >= 0; i--) {
      const item = tocItems[i];
      if (scrollTop >= item.element.offsetTop) {
        activeItem = item;
        break;
      }
    }
    
    const tocLinks = document.querySelectorAll('.toc-link');
    tocLinks.forEach(link => link.classList.remove('active'));
    
    if (activeItem && currentActiveItem !== activeItem) {
      const activeLink = document.querySelector(`[data-target="${activeItem.id}"]`);
      if (activeLink) {
        activeLink.classList.add('active');
        
        // Auto-scroll TOC to show active item
        const tocNav = document.getElementById('toc-nav');
        if (tocNav) {
          const linkRect = activeLink.getBoundingClientRect();
          const navRect = tocNav.getBoundingClientRect();
          
          if (linkRect.top < navRect.top || linkRect.bottom > navRect.bottom) {
            activeLink.scrollIntoView({
              behavior: 'smooth',
              block: 'center'
            });
          }
        }
      }
      currentActiveItem = activeItem;
    }
  }
  
  function updateReadingPosition() {
    const readingPositionEl = document.getElementById('reading-position');
    if (!readingPositionEl || tocItems.length === 0) return;
    
    const currentIndex = tocItems.findIndex(item => item === currentActiveItem);
    if (currentIndex !== -1) {
      readingPositionEl.textContent = `Section ${currentIndex + 1}/${tocItems.length}`;
    }
  }
  
  function updateReadingStats() {
    const readingTimeEl = document.getElementById('reading-time');
    if (!readingTimeEl) return;
    
    const article = document.getElementById('article-content');
    if (article) {
      const text = article.textContent || '';
      const words = text.trim().split(/\s+/).length;
      const readingTime = Math.ceil(words / 200); // ~200 words per minute
      readingTimeEl.textContent = `~${readingTime} min`;
    }
  }
  
  function handleResize() {
    if (!tocSidebar) return;
    
    // Auto-open on desktop
    if (window.innerWidth >= 1200) {
      tocSidebar.classList.add('open');
    }
    
    // Recalculate positions
    tocItems.forEach(item => {
      item.offsetTop = item.element.offsetTop;
    });
    updateReadingProgress();
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', initializeTOC);
  
  // Event listeners
  window.addEventListener('scroll', updateReadingProgress);
  window.addEventListener('resize', handleResize);
</script>

<style>
  /* Enhanced Table of Contents Sidebar */
  .toc-sidebar {
    position: fixed;
    left: -280px;
    top: 80px;
    width: 280px;
    height: calc(100vh - 100px);
    background: linear-gradient(145deg, var(--color-bg-secondary), var(--color-bg));
    border: 1px solid var(--color-border);
    border-radius: 0 var(--radius-xl) var(--radius-xl) 0;
    box-shadow: var(--shadow-2xl);
    z-index: 100;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
    backdrop-filter: blur(10px);
  }
  
  .toc-sidebar.open {
    left: 0;
  }
  
  .toc-toggle {
    position: absolute;
    right: -45px;
    top: 20px;
    width: 45px;
    height: 45px;
    background: var(--color-primary);
    color: white;
    border: none;
    border-radius: 0 50% 50% 0;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    box-shadow: var(--shadow-lg);
    z-index: 101;
  }
  
  .toc-toggle:hover {
    background: var(--color-accent);
    transform: translateX(5px);
    box-shadow: var(--shadow-xl);
  }
  
  .toc-toggle svg {
    transition: transform 0.3s ease;
  }
  
  .toc-sidebar.open .toc-toggle svg {
    transform: rotate(180deg);
  }
  
  .toc-content {
    height: 100%;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }
  
  .toc-header {
    padding: var(--space-lg);
    border-bottom: 1px solid var(--color-border);
    background: var(--color-bg);
    flex-shrink: 0;
  }
  
  .toc-header h3 {
    margin: 0 0 var(--space-md) 0;
    color: var(--color-primary);
    font-size: 1.1rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: var(--space-sm);
  }
  
  .toc-header h3::before {
    content: "📚";
    font-size: 1rem;
  }
  
  .reading-progress {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    margin-bottom: var(--space-sm);
  }
  
  .progress-bar {
    flex: 1;
    height: 6px;
    background: var(--color-border);
    border-radius: var(--radius-full);
    overflow: hidden;
    position: relative;
  }
  
  .progress-bar::after {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: var(--width, 0%);
    background: linear-gradient(90deg, var(--color-accent), var(--color-accent-hover));
    border-radius: var(--radius-full);
    transition: width 0.3s ease;
    box-shadow: 0 0 10px rgba(59, 130, 246, 0.5);
  }
  
  .progress-text {
    font-size: 0.8rem;
    color: var(--color-text-muted);
    font-weight: 600;
    min-width: 35px;
    text-align: right;
  }
  
  .reading-stats {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.75rem;
    color: var(--color-text-muted);
    margin-top: var(--space-xs);
  }
  
  .reading-time::before {
    content: "⏱️ ";
  }
  
  .reading-position::before {
    content: "📍 ";
  }
  
  .toc-nav {
    flex: 1;
    padding: var(--space-md);
    overflow-y: auto;
    overflow-x: hidden;
    scrollbar-width: thin;
    scrollbar-color: var(--color-border) transparent;
  }
  
  .toc-nav::-webkit-scrollbar {
    width: 4px;
  }
  
  .toc-nav::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .toc-nav::-webkit-scrollbar-thumb {
    background: var(--color-accent);
    border-radius: var(--radius-full);
  }
  
  .toc-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .toc-item {
    margin-bottom: var(--space-xs);
  }
  
  .toc-link {
    display: block;
    padding: var(--space-sm) var(--space-md);
    color: var(--color-text-light);
    text-decoration: none;
    border-radius: var(--radius-sm);
    font-size: 0.875rem;
    line-height: 1.4;
    transition: all var(--transition-fast);
    border-left: 3px solid transparent;
    position: relative;
    overflow: hidden;
  }
  
  .toc-link::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: 100%;
    background: linear-gradient(90deg, rgba(59, 130, 246, 0.1), transparent);
    transition: width 0.3s ease;
  }
  
  .toc-link:hover {
    background: var(--color-bg-tertiary);
    color: var(--color-text);
    border-left-color: var(--color-accent);
    transform: translateX(4px);
  }
  
  .toc-link:hover::before {
    width: 100%;
  }
  
  .toc-link.active {
    background: var(--color-accent-bg);
    color: var(--color-accent);
    border-left-color: var(--color-accent);
    font-weight: 600;
    box-shadow: 0 2px 8px rgba(59, 130, 246, 0.2);
  }
  
  .toc-link.active::before {
    width: 100%;
    background: linear-gradient(90deg, rgba(59, 130, 246, 0.2), transparent);
  }
  
  /* TOC Levels */
  .toc-level-1 .toc-link {
    font-weight: 600;
    font-size: 0.9rem;
  }
  
  .toc-level-2 .toc-link {
    padding-left: calc(var(--space-md) + var(--space-sm));
  }
  
  .toc-level-3 .toc-link {
    padding-left: calc(var(--space-md) + var(--space-lg));
    font-size: 0.8rem;
    opacity: 0.9;
  }
  
  .toc-level-4 .toc-link {
    padding-left: calc(var(--space-md) + var(--space-xl));
    font-size: 0.75rem;
    opacity: 0.8;
  }
  
  .toc-actions {
    border-top: 1px solid var(--color-border);
    padding: var(--space-md);
    display: flex;
    gap: var(--space-sm);
    flex-shrink: 0;
  }
  
  .toc-action-btn {
    flex: 1;
    padding: var(--space-sm) var(--space-md);
    background: var(--color-bg-tertiary);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-sm);
    color: var(--color-text);
    font-size: 0.75rem;
    cursor: pointer;
    transition: all var(--transition-fast);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-xs);
  }
  
  .toc-action-btn:hover {
    background: var(--color-accent);
    color: white;
    border-color: var(--color-accent);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }
  
  .no-headings {
    color: var(--color-text-muted);
    font-style: italic;
    text-align: center;
    padding: var(--space-lg);
  }

  /* Blog Post Layout */
  .blog-post {
    padding: var(--space-3xl) 0;
    min-height: 100vh;
    transition: margin-left var(--transition-normal);
  }
  
  /* Article Header */
  .article-header {
    margin-bottom: var(--space-3xl);
    text-align: center;
    padding-bottom: var(--space-2xl);
    border-bottom: 2px solid var(--color-border);
  }
  
  .article-meta {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-md);
    margin-bottom: var(--space-lg);
    font-size: 0.875rem;
    color: var(--color-text-muted);
  }
  
  .category-badge {
    background: linear-gradient(135deg, var(--color-accent), var(--color-accent-hover));
    color: white;
    padding: var(--space-xs) var(--space-md);
    border-radius: var(--radius-full);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-size: 0.75rem;
  }
  
  .article-title {
    font-size: 2.5rem;
    font-weight: 700;
    line-height: 1.2;
    margin: 0 0 var(--space-lg) 0;
    background: linear-gradient(135deg, var(--color-primary), var(--color-accent));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  .article-description {
    font-size: 1.25rem;
    color: var(--color-text-light);
    max-width: 42rem;
    margin: 0 auto;
    line-height: 1.6;
  }
  
  .hero-image {
    margin-top: var(--space-2xl);
    border-radius: var(--radius-lg);
    overflow: hidden;
    box-shadow: var(--shadow-xl);
  }
  
  .hero-image img {
    width: 100%;
    height: auto;
    display: block;
  }
  
  /* Article Content */
  .article-content {
    max-width: 42rem;
    margin: 0 auto;
    font-size: 1.125rem;
    line-height: 1.8;
    color: var(--color-text);
  }
  
  /* Article Footer */
  .article-footer {
    margin-top: var(--space-3xl);
    padding-top: var(--space-2xl);
    border-top: 2px solid var(--color-border);
  }
  
  .article-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: var(--space-lg);
    flex-wrap: wrap;
  }

  /* Auto-open on large screens */
  @media (min-width: 1200px) {
    .toc-sidebar {
      left: 0;
    }
    
    .blog-post {
      margin-left: 300px;
    }
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .toc-sidebar {
      width: 90%;
      left: -90%;
      top: 70px;
      height: calc(100vh - 70px);
      border-radius: 0 var(--radius-lg) var(--radius-lg) 0;
    }
    
    .toc-toggle {
      right: -55px;
      width: 55px;
      height: 55px;
      border-radius: 0 30px 30px 0;
    }
    
    .blog-post {
      margin-left: 0;
    }
    
    .article-title {
      font-size: 2rem;
    }
    
    .article-description {
      font-size: 1.1rem;
    }
    
    .article-content {
      font-size: 1rem;
    }
    
    .article-nav {
      flex-direction: column;
    }
    
    .article-nav .btn {
      width: 100%;
      text-align: center;
    }
  }

  @media (max-width: 480px) {
    .article-title {
      font-size: 1.75rem;
    }
    
    .article-description {
      font-size: 1rem;
    }
  }
</style>